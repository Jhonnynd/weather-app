{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","search","evt","key","fetch","state","query","then","res","json","result","setState","weather","console","log","className","this","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","class","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wOACMA,EACC,mCADDA,EAEE,2CAsEOC,E,YAzDd,aAAe,IAAD,8BACb,+CAMDC,OAAS,SAACC,GACO,UAAZA,EAAIC,KACPC,MAAM,GAAD,OAAIL,EAAJ,qBAAyB,EAAKM,MAAMC,MAApC,+BAAgEP,IACnEQ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACL,EAAKC,SAAS,CAACC,QAASF,IACxB,EAAKC,SAAS,CAACL,MAAO,KACtBO,QAAQC,IAAIJ,OAZf,EAAKL,MAAO,CACXC,MAAO,GACPM,QAAS,IAJG,E,sEAmBJ,IAAD,OACR,OACE,yBAAKG,UAA8C,oBAA3BC,KAAKX,MAAMO,QAAQK,MAAyBD,KAAKX,MAAMO,QAAQK,KAAKC,KAAO,GAAM,WAAsB,OAC9H,8BACC,yBAAKH,UAAU,cACd,2BACCI,KAAK,OACLJ,UAAU,aACVK,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAG,EAAKX,SAAS,CAACL,MAAOgB,EAAEC,OAAOC,SAC7CA,MAAOR,KAAKX,MAAMC,MAClBmB,WAAYT,KAAKf,UAIkB,oBAA3Be,KAAKX,MAAMO,QAAQK,KAC5B,6BACC,yBAAKF,UAAU,gBACf,yBAAKA,UAAU,YAAYC,KAAKX,MAAMO,QAAQc,KAA9C,KAAsDV,KAAKX,MAAMO,QAAQe,IAAIC,SAC7E,yBAAKb,UAAU,QAjDJ,SAACc,GACnB,IAGKC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALQ,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKxGL,EAAEM,YACjBC,EAAOP,EAAEQ,cACb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAyCLE,CAAY,IAAIC,QAExC,yBAAKxB,UAAU,eACd,yBAAKA,UAAU,QAAQyB,KAAKC,MAAMzB,KAAKX,MAAMO,QAAQK,KAAKC,MAA1D,SACA,yBAAKH,UAAU,WAAWC,KAAKX,MAAMO,QAAQA,QAAQ,GAAGK,QAIxD,yBAAKF,UAAU,gBACd,wBAAI2B,MAAM,YAAV,2C,GAhDSC,aCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,MAAK,SAAAiD,GACjCA,EAAaC,iB","file":"static/js/main.d3c62e92.chunk.js","sourcesContent":["import React, { Component } from 'react';\nconst api = {\n  key: \"4510b505f5c57f820ecb2b9a212d9425\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\nconst dateBuilder= (d) => {\n\tlet months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n\t let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\t \n\t let day = days[d.getDay()];\n\t let date = d.getDate();\n\t let month = months[d.getMonth()];\n\t let year = d.getFullYear();\n\t return `${day} ${date} ${month} ${year}`\n}\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state= {\n\t\t\tquery: \"\",\n\t\t\tweather: {},\n\t\t}\n\t}\n\tsearch = (evt) => {\n\t\t\tif(evt.key === \"Enter\") {\n\t\t\tfetch(`${api.base}weather?q=${this.state.query}&units=metric&APPID=${api.key}`)\n\t\t\t\t.then(res => res.json())\n\t\t\t\t.then(result => {\n\t\t\t\t\tthis.setState({weather: result});\n\t\t\t\t\tthis.setState({query: ''});\n\t\t\t\t\tconsole.log(result);\n\t\t\t\t});\n\t\t\t}\n\t\t\n\t}\n\trender() {\n\t\treturn (\n\t\t\t\t<div className={(typeof this.state.weather.main != \"undefined\") ? ((this.state.weather.main.temp > 16) ? 'app warm' : 'app') : 'app'}>\n\t\t\t\t\t<main>\n\t\t\t\t\t\t<div className=\"search-box\">\n\t\t\t\t\t\t\t<input \n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tclassName=\"search-bar\"\n\t\t\t\t\t\t\t\tplaceholder=\"search...\"\n\t\t\t\t\t\t\t\tonChange={e=> this.setState({query: e.target.value})}\n\t\t\t\t\t\t\t\tvalue={this.state.query}\n\t\t\t\t\t\t\t\tonKeyPress={this.search}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t{(typeof this.state.weather.main != \"undefined\") ? (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<div className=\"location-box\">\n\t\t\t\t\t\t\t\t<div className=\"location\">{this.state.weather.name}, {this.state.weather.sys.country}</div>\n\t\t\t\t\t\t\t\t<div className=\"date\">{dateBuilder(new Date())}</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"weather-box\">\n\t\t\t\t\t\t\t\t<div className=\"temp\">{Math.round(this.state.weather.main.temp)}Â°c</div>\n\t\t\t\t\t\t\t\t<div className=\"weather\">{this.state.weather.weather[0].main}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<div className=\"location-box\">\n\t\t\t\t\t\t\t\t\t<h1 class=\"location\">Search a city to see its weather</h1>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\n\t\t\t\t\t</main>\n\t\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}